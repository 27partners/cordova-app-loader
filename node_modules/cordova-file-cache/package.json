{
  "name": "cordova-file-cache",
  "version": "0.1.1",
  "description": "Cordova File Cache",
  "main": "index.js",
  "scripts": {
    "prepublish": "gluejs --include index.js --include murmerhash.js --global CordovaFileCache > CordovaFileCache.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:markmarijnissen/cordova-file-cache.git"
  },
  "keywords": [
    "cordova",
    "file",
    "cache"
  ],
  "author": {
    "name": "Mark Marijnissen"
  },
  "license": "MIT",
  "dependencies": {
    "cordova-promise-fs": "^0.4.1"
  },
  "readme": "cordova-file-cache\n==========\n> Super Awesome File Cache for Cordova Apps\n\n\n## Getting started\n\n```bash\n  # fetch code using bower\n  bower install cordova-file-cache cordova-promise-fs\n  # ...or npm...\n  npm install cordova-file-cache cordova-promise-fs\n  # or just download and include the javascript\n  curl https://raw.githubusercontent.com/markmarijnissen/cordova-promise-fs/master/CordovaPromiseFS.js\n  curl https://raw.githubusercontent.com/markmarijnissen/cordova-file-cache/master/CordovaFileCache.js\n\n  # install Cordova plugins\n  cordova plugin add org.apache.cordova.file\n  cordova plugin add org.apache.cordova.file-transfer # optional\n```\n\n## Usage\n\n### Initialize & configuration\n```javascript\n// Initialize a Cache\nvar cache = CordovaFileCache({\n  fs: CordovaPromiseFS(),\n  mode: 'hash', // or 'mirror'\n  localRoot: 'data',\n  serverRoot: 'http://yourserver.com/files/' // optional, required on 'mirror' mode\n});\n\ncache.ready.then(function(list){\n    // Promise when cache is ready.\n    // Returns a list of paths on the FileSystem that are cached.\n}) \n```\n\n* **mode: \"mirror\"**: Mirrors the file structure from `serverRoot` at `localRoot`.\n* **mode: \"hash\"**: Filename is hash of server url (plus extension).\n* **CordovaPromiseFS()** is an instance of [cordova-promise-fs](https://github.com/markmarijnissen/cordova-promise-fs).\n\n### Add files to the cache\n```javascript\n\n// First, add files\ncache.add('http://yourserver.com/folder/photo1.jpg')\ncache.add('folder/photo2.jpg')  // automatically prepends the `severRoot`\ncache.add(['photo3.jpg','photo4.jpg'])\n\n// Now the cache is dirty: It needs to download.\ncache.isDirty() === true\n// cache.add also returns if the cache is dirty.\nvar dirty = cache.add(['photo3.jpg']) \n\n// Download files. \ncache.download(onprogress).then(function(cache){ ... },function(failedDownloads) { ... }) \n// It is recommended to avoid heavy UI and animation while downloading.\n// The optional 'onprogress' event handler is enhanced with information\n// about the total download queue:\nonprogress = function(ProgressEvent) {\n  ProgressEvent.index // current download index\n  ProgressEvent.total // total files to download\n}\n```\n\n### Use the cache\n```javascript\n// Get the cached internalURL of the file: \"cdvfile://localhost/persisent/cache/photo3.jpg\" \ncache.get('photo3.jpg');           \ncache.toInternalURL('photo3.jpg'); \ncache.toInternalURL('http://yourserver.com/photo3.jpg'); \n\n// Get the file URL of the file: \"file://.../photo3.jpg\";\ncache.toURL('photo3.jpg');\n\n// When file is not cached, the original input is returned as a fallback.\ncache.get('http://yoursever.com/never-cached-this.jpg') === 'http://yoursever.com/never-cached-this.jpg'\n\n// Get Base64 encoded data URL.\ncache.toDataURL('photo3.jpg').then(function(base64){},function(err){});\n```\n\n### Other functions\n```javascript\n// Abort all downloads\ncache.abort()\n\n// Clear cache (removes localRoot directory)\ncache.clear().then( ... )\n\n// Or remove a single file\ncache.remove('photo3.jpg').then( ... )\n\n// Returns path on Cordova Filesystem, i.e. \"/cache/photo3.jpg\"\ncache.toPath('photo3.jpg');      \n\n// Returns server URL to download, i.e. \"http://yourserver.com/photo3.jpg\";\ncache.toServerURL('photo3.jpg'); \n\n// Needs a download?\ncache.isDirty(); \n\n// Returns a list of server URLs that need to be downloaded.\ncache.getDownloadQueue();        \n\n // Return a list of paths that are cached (i.e. [\"/cache/photo3.jpg\"])\ncache.list().then(function(list){...},function(err){...}) \n\n```\n\n## Changelog\n\n### 0.1.0 (06/11/2014)\n\n## Contribute\n\nConvert CommonJS to a browser-version:\n```bash\nnpm install gluejs -g\nnpm run-script prepublish\n```\n\nFeel free to contribute to this project in any way. The easiest way to support this project is by giving it a star.\n\n## Contact\n-   @markmarijnissen\n-   http://www.madebymark.nl\n-   info@madebymark.nl\n\nÂ© 2014 - Mark Marijnissen",
  "readmeFilename": "README.md",
  "gitHead": "5e316d1209eab323597e385336d5f067b4697ea8",
  "bugs": {
    "url": "https://github.com/markmarijnissen/cordova-file-cache/issues"
  },
  "homepage": "https://github.com/markmarijnissen/cordova-file-cache",
  "_id": "cordova-file-cache@0.1.1",
  "_shasum": "9eaa280067a0032d9630966b0996a5af8d189130",
  "_from": "cordova-file-cache@^0.1.1"
}
