{
  "name": "cordova-promise-fs",
  "version": "0.4.1",
  "description": "Cordova FileSystem convienence functions that return promises.",
  "main": "index.js",
  "scripts": {
    "prepublish": "gluejs --include index.js --global CordovaPromiseFS > CordovaPromiseFS.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:markmarijnissen/cordova-promise-fs.git"
  },
  "keywords": [
    "cordova",
    "fs",
    "file",
    "filesystem",
    "promise"
  ],
  "author": {
    "name": "Mark Marijnissen"
  },
  "license": "MIT",
  "readme": "cordova-promise-fs\n==========\n> Wraps the Cordova File API in convenient functions (that return a Promise)\n\nAre you entangled in a async callback mess to get even the simplest task done? Wait no longer -- here is **cordova-promise-fs**!\n\n## Getting started\n\n```bash\n  # fetch code using bower\n  bower install cordova-promise-fs\n  # ...or npm...\n  npm install cordova-promise-fs\n  # or just download and include the javascript\n  curl https://raw.githubusercontent.com/markmarijnissen/cordova-file-cache/master/CordovaFileCache.js\n\n  # install Cordova plugins\n  cordova plugin add org.apache.cordova.file\n  cordova plugin add org.apache.cordova.file-transfer # optional\n```\n\n## Usage\n\n### Initialize & configuration\n```javascript\nvar fs = CordovaPromiseFS({\n  persistent: true, // or false\n  storageSize: 20*1024*1024, // storage size in bytes, default 20MB \n  concurrency: 3 // how many concurrent uploads/downloads?\n  Promise: require('promiscuous') // Your favorite Promise/A+ library! \n});\n```\n\n**Note on concurrency:** Concurrent uploads/downloads completely trash your mobile application. That's why I've put a concurrency limit on the number of downloads/uploads. Meteor sets this number on 30. In my experimental testing, I found 3 much more reasonable.\n\n### Browsing files\n```javascript\nfs.exists(filename)       // checks if file exists. returns fileEntry or false.\nfs.file(filename)         // returns a fileEntry\nfs.dir(path)              // returns a dirEntry\nfs.list(path,optionString)// return array with filenames (including path)\n\noptionString = 'r'        // recursive list\noptionString = 'd'        // only list directories\noptionString = 'f'        // only list files\noptionString = 'e'        // return results as FileEntry/DirectoryEntry (instead as path-string)\noptionString = 'rfe'      // mix options! return entries of all files, recursively\n```\n\n### Reading files\n```javascript\nfs.read(filename)         // returns text-content of a file\nfs.readJSON(filename)     // returns JSON-parsed contents of a file\nfs.toUrl(filename)        // returns URL to be used in js/html/css (file://....)\nfs.toInternalURL(filename)// returns cordova internal URL (cdvfile://....)\nfs.toDataURL(filename)    // returns Base64 encoded Data URI\n```\n\n### Writing files\n```javascript\nfs.write(filename,data)   // writes a Blob, a String, or data (as JSON). Ensures directory exists.\n```\n\n### File operations\n```javascript\nfs.create(filename)       // creates a file\nfs.ensure(path)           // ensures directory exists\nfs.move(src,dest)         // move from src to dist. Ensures dest directory exists.\nfs.copy(src,dest)         // copy from src to dist. Ensures dest directory exists.\nfs.remove(src)            // removes file. Resolves even if file was already removed.\nfs.remove(src,true)       // removes file. Rejects when file does not exist.\nfs.removeDir(path)\n```\n\n### Upload and download\n```javascript\nvar promise = fs.upload(source,destination,[options],[onprogress]);\nvar promise = fs.upload(source,destination,[onprogress]);\nvar promise = fs.download(source,destination,[options],[onprogress]);\nvar promise = fs.download(source,destination,[onprogress]);\n\n// upload/download augments the promise with two extra functions:\npromise.progress(function(progressEvent){...})\npromise.abort();\n\n// Gotcha: progress and abort() are unchainable; \nfs.upload(...).then(...)  // won't return the augmented promise, just an ordinary one!\n```\n\n### Utilities\n```javascript\nfs.fs // returns promise for the FileSystem\nfs.filename(path) // converts path to filename (last part after /)\nfs.dirname(path) // converts path dirname (everything except part after last /)\n```\n\n## Changelog\n\n### 0.4.0 (06/11/2014)\n\n* Various small changes\n* Added `CordovaPromiseFS.js` for everybody who does not use Browserify/Webpack\n\n### 0.3.0 (05/11/2014)\n\n* Added `list` options (list `r`ecursively, only `f`iles, only `d`irectories, return result as `e`ntries)\n\n### 0.2.0 (05/11/2014)\n\n* Added `upload` and `download` methods with concurrency limit\n\n## Contribute\n\nConvert CommonJS to a browser-version:\n```bash\nnpm install gluejs -g\nnpm run-script prepublish\n```\n\nFeel free to contribute to this project in any way. The easiest way to support this project is by giving it a star.\n\n## Contact\n-   @markmarijnissen\n-   http://www.madebymark.nl\n-   info@madebymark.nl\n\nÂ© 2014 - Mark Marijnissen",
  "readmeFilename": "README.md",
  "gitHead": "9248480a6bc91070e46513a3916c590413ef459c",
  "bugs": {
    "url": "https://github.com/markmarijnissen/cordova-promise-fs/issues"
  },
  "homepage": "https://github.com/markmarijnissen/cordova-promise-fs",
  "_id": "cordova-promise-fs@0.4.1",
  "_shasum": "5912608ac0deef262dd1c05f1934e64f3cc16bca",
  "_from": "cordova-promise-fs@^0.4.1"
}
